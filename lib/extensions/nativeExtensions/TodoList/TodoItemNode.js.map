{"version":3,"sources":["../../../../src/extensions/nativeExtensions/TodoList/TodoItemNode.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,SAAS,IAAT,QAAqB,QAArB;AACA,SAAS,YAAT,EAAuB,sBAAvB,EAA+C,YAA/C,QAAmE,iBAAnE;AACA,OAAO,YAAP;;IAEqB,Q;;;;;;;;;;;;;+BAiDL;AAAA,UAAN,IAAM,QAAN,IAAM;AACZ,aAAO;AACL,QAAA,KAAK,EAAE,sBAAsB,CAAC,IAAD,CADxB;AAEL,QAAA,GAAG,EAAE,KAAK,OAAL,CAAa,MAAb,GAAsB,YAAY,CAAC,IAAD,CAAlC,GAA2C,YAAK,CAAG,CAFnD;AAGL,qBAAa,YAAY,CAAC,IAAD;AAHpB,OAAP;AAKD;;;wBApDO;AACN,aAAO,WAAP;AACD;;;wBAEiB;AAChB,aAAO;AACL,QAAA,MAAM,EAAE;AADH,OAAP;AAGD;;;wBAEO;AACN,aAAO,YAAP;AACD;;;wBAES;AAAA;;AACR,aAAO;AACL,QAAA,KAAK,EAAE;AACL,UAAA,IAAI,EAAE;AACJ,YAAA,OAAO,EAAE;AADL;AADD,SADF;AAML,QAAA,SAAS,EAAE,IANN;AAOL,QAAA,OAAO,EAAE,KAAK,OAAL,CAAa,MAAb,GAAsB,wBAAtB,GAAiD,YAPrD;AAQL,QAAA,KAAK,EAAE,eAAA,IAAI,EAAG;AAAA,cACJ,IADI,GACK,IAAI,CAAC,KADV,CACJ,IADI;AAGZ,iBAAO,CACL,IADK,EAEL;AACE,yBAAa,KAAI,CAAC,IADpB;AAEE,yBAAa,IAAI,CAAC,QAAL;AAFf,WAFK,EAML,CAAC,MAAD,EAAS;AAAE,YAAA,KAAK,EAAE,eAAT;AAA0B,YAAA,eAAe,EAAE;AAA3C,WAAT,CANK,EAOL,CAAC,KAAD,EAAQ;AAAE,YAAA,KAAK,EAAE;AAAT,WAAR,EAAmC,CAAnC,CAPK,CAAP;AASD,SApBI;AAqBL,QAAA,QAAQ,EAAE,CAAC;AACT,UAAA,QAAQ,EAAE,EADD;AAET,UAAA,GAAG,yBAAiB,KAAK,IAAtB,QAFM;AAGT,UAAA,QAAQ,EAAE,kBAAA,GAAG;AAAA,mBAAK;AAChB,cAAA,IAAI,EAAE,GAAG,CAAC,YAAJ,CAAiB,WAAjB,MAAkC;AADxB,aAAL;AAAA;AAHJ,SAAD;AArBL,OAAP;AA6BD;;;;EA/CmC,I;;SAAjB,Q","sourcesContent":["// @ts-ignore\nimport { Node } from 'tiptap'\nimport { sinkListItem, splitToDefaultListItem, liftListItem } from 'tiptap-commands'\nimport TodoItemView from './TodoItemView.vue'\n\nexport default class TodoItem extends Node {\n  options\n\n  get name () {\n    return 'todo_item'\n  }\n\n  get defaultOptions () {\n    return {\n      nested: false\n    }\n  }\n\n  get view () {\n    return TodoItemView\n  }\n\n  get schema () {\n    return {\n      attrs: {\n        done: {\n          default: false\n        }\n      },\n      draggable: true,\n      content: this.options.nested ? '(paragraph|todo_list)+' : 'paragraph+',\n      toDOM: node => {\n        const { done } = node.attrs\n\n        return [\n          'li',\n          {\n            'data-type': this.name,\n            'data-done': done.toString()\n          },\n          ['span', { class: 'todo-checkbox', contenteditable: 'false' }],\n          ['div', { class: 'todo-content' }, 0]\n        ]\n      },\n      parseDOM: [{\n        priority: 51,\n        tag: `[data-type=\"${this.name}\"]`,\n        getAttrs: dom => ({\n          done: dom.getAttribute('data-done') === 'true'\n        })\n      }]\n    }\n  }\n\n  keys ({ type }) {\n    return {\n      Enter: splitToDefaultListItem(type),\n      Tab: this.options.nested ? sinkListItem(type) : () => {},\n      'Shift-Tab': liftListItem(type)\n    }\n  }\n}\n"],"sourceRoot":"","file":"TodoItemNode.js"}